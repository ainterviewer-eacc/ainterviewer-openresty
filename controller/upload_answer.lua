---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by XPK.
--- DateTime: 2023/12/28 20:19
---
local SessionInfoDao = require("dao.db_ai_interview.session_info_dao")
local QuestionInfoDao = require("dao.db_ai_interview.question_info_dao")

syncutil.set_header()
if "OPTIONS" == ngx.req.get_method() then
    ngx.exit(ngx.HTTP_OK)
end

local args = ngx.req.get_uri_args()
local session_id = args.session_id
local question_id = args.question_id
local json_data = syncutil.get_body_http()
local answer = json_data.answer
syncutil.check_params_http(3, session_id, question_id, answer)

local session_info = SessionInfoDao.query_session_info({"*"},{session_id = session_id, status = 1})
if not session_info or not next(session_info) then
    syncutil.exit_http(200, errcode.INTERNAL_ERROR, "internal server error.")
end

local topic_list = cjson_safe.decode(session_info[1].topic_list)
if not topic_list then
    syncutil.exit_http(200, errcode.INTERNAL_ERROR, "internal server error.")
end
local topic_index = math.random(1, #topic_list)
local topic = topic_list[topic_index]

-- 补全答案
QuestionInfoDao.update_question_info({answer = answer}, {question_id = question_id})

-- 查找所有历史问题
local question_list = QuestionInfoDao.query_question_info({"*"}, {session_id = session_id}, nil, nil, " order by id asc")
if not question_list or not next(question_list) then
    syncutil.exit_http(200, errcode.INTERNAL_ERROR, "internal server error.")
end

local history_question_and_answer = {}
for _, v in ipairs(question_list) do
    local item = {}
    table.insert(item, v.question)
    table.insert(item, v.answer)
    table.insert(item, v.topic)
    table.insert(history_question_and_answer, item)
end
-- 调用gpt
local ret, err, question_info = gpt_agent_proxy.gen_question(topic, history_question_and_answer, 1)

if ret ~= 0 then
    syncutil.exit_http(200, ret, err)
end

-- 补全评价
QuestionInfoDao.update_question_info({evaluation = question_info.evaluation}, {question_id = question_id})

local new_question_id = string_util.luuid()
QuestionInfoDao.insert_question_info({
    session_id = session_id,
    question_id = new_question_id,
    question = question_info.interview_question,
    answer = '',
    topic = question_info.current_topic,
    evaluation = '',
})

local data = {
    next_question_id = new_question_id,
    current_topic = question_info.current_topic,
    interview_question = question_info.interview_question,
    evaluation = question_info.evaluation,
}
syncutil.return_info(data)