
worker_processes  auto;

worker_rlimit_nofile 102400;
worker_rlimit_core 10240000000;
working_directory /tmp;
# error_log  logs/error.log  debug;
error_log  logs/error.log  error;
pid		logs/nginx.pid;

events {
	worker_connections  102400;
}

http {
	resolver 114.114.114.114 ipv6=off;
	include  nginx/conf/mime.types;
	default_type  application/json;

	log_format  main  '$remote_addr $time_iso8601 $msec $request_time $request_length '
					  '$connection $connection_requests $uri "$request" '
					  '$status $body_bytes_sent $sent_http_X_IS_Error_Code "$sent_http_X_IS_Error_Msg" "$http_referer" '
					  '"$http_user_agent" "$http_x_forwarded_for" "$http_x_is_ip" $http_host $upstream_addr $upstream_status $upstream_response_time ';

    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/5002.log main;

    variables_hash_max_size 2048;
    variables_hash_bucket_size 64;

	log_subrequest on;
	include nginx/conf/*backend.conf;

	keepalive_timeout  100;
	keepalive_requests 10240;
	client_header_timeout 100;
	client_body_timeout 100;

	#请求dps请求速率限制
	limit_req_zone $binary_remote_addr zone=dps_zone:100m rate=100r/s;

	lua_package_path '${prefix}/conf/libs/?.lua;/usr/local/openresty/nginx/conf/?.lua;/usr/local/openresty/nginx/lua/lib/lua/5.1/?.lua;/usr/share/lua/5.1/?.lua;;';
	lua_package_cpath '/usr/local/openresty/nginx/lua/lib/lua/5.1/?.so;/usr/lib64/lua/5.1/luarocks/?.so;;';

	#include *shm.conf;
	include nginx/shm/*shm.conf;
	init_by_lua_file 'conf/nginx/phase/init-by-lua.lua';

	more_set_headers 'Server: Intsig Web Server';
	proxy_http_version 1.1;
	proxy_set_header Connection "";

    init_worker_by_lua_block {
        local uuid = require 'resty.jit-uuid'
        uuid.seed() -- very important!
    }

	server {
	    set_by_lua $product_env 'return PRODUCT_ENV';
		include nginx/conf/host_var.conf;

		listen	   8081;
		lua_check_client_abort on;
		include route/*.conf;
		default_type application/json;
        charset utf-8;

		location = /ping {
			access_log off;
			log_subrequest off;
			if ($request_method != GET ) {
				return 405;
			}
			content_by_lua 'ngx.exit(ngx.HTTP_OK)';
		}

		location / {
			#root /data;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                add_header 'Content-Type' 'application/json';
                return 200;
            }

            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';

			access_log off;
			log_subrequest off;
			default_type text/plain;
			header_filter_by_lua 'ngx.header.Cut = "SHUTDOWN"';
			return 406;
		}
	}

	#server {
    #    listen 443 ssl;
    #    server_name ainterviewer.cn;
#
 #       ssl_certificate /etc/ssl/certs/ainterviewer.cn_bundle.crt;
  #      ssl_certificate_key /etc/ssl/private/ainterviewer.cn.key;
   #      ssl_session_timeout 5m;
    #     #请按照以下协议配置
     #    ssl_protocols TLSv1.2 TLSv1.3;
      #   #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。
       #  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        # ssl_prefer_server_ciphers on;
#
 #       location / {
  #          proxy_pass http://localhost:8081;
   #     }
    #}

}
